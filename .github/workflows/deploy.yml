name: Deploy SecureAuditAI Agent

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-west-2
  AWS_DEFAULT_REGION: us-west-2
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Validate Infrastructure
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate CloudFormation template
        run: |
          echo "üîç Validating CloudFormation template..."
          aws cloudformation validate-template --template-body file://cloudformation/template.yaml
          echo "‚úÖ Template validation passed"

      - name: Validate Lambda packages exist
        run: |
          echo "üîç Checking Lambda source files..."
          [ -f "lambda/trigger_scan.py" ] && echo "‚úÖ trigger_scan.py found" || (echo "‚ùå trigger_scan.py missing" && exit 1)
          [ -f "lambda/api_audit_runs.py" ] && echo "‚úÖ api_audit_runs.py found" || (echo "‚ùå api_audit_runs.py missing" && exit 1)
          [ -f "lambda/api_findings.py" ] && echo "‚úÖ api_findings.py found" || (echo "‚ùå api_findings.py missing" && exit 1)
          echo "‚úÖ All Lambda source files present"

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'
    environment: dev
    concurrency:
      group: deploy-dev-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate deterministic Cognito domain prefix
        id: generate-domain
        run: |
          echo "üîÑ Generating deterministic Cognito domain prefix..."
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          DETERMINISTIC_SUFFIX="${ACCOUNT_ID: -8}"
          DETERMINISTIC_SUFFIX=$(echo "$DETERMINISTIC_SUFFIX" | tr -cd 'a-z0-9')
          COGNITO_PREFIX="secureauditai-${ENVIRONMENT}-${DETERMINISTIC_SUFFIX}"

          if [[ ! "$COGNITO_PREFIX" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || [[ ${#COGNITO_PREFIX} -lt 1 ]] || [[ ${#COGNITO_PREFIX} -gt 63 ]]; then
            echo "‚ùå Invalid domain format: $COGNITO_PREFIX"
            exit 1
          fi

          echo "‚úÖ Generated domain: ${COGNITO_PREFIX}"
          echo "COGNITO_DOMAIN=${COGNITO_PREFIX}" >> $GITHUB_OUTPUT

      - name: Setup S3 bucket for deployment artifacts
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          BUCKET_NAME="secureauditai-deployment-us-west-2-${ENVIRONMENT}"
          echo "DEPLOYMENT_BUCKET=${BUCKET_NAME}" >> $GITHUB_ENV

          # Check if bucket exists
          if aws s3 ls s3://${BUCKET_NAME} --region us-west-2 2>/dev/null; then
            echo "‚úÖ Using existing deployment bucket: ${BUCKET_NAME}"
          else
            echo "üì¶ Creating new deployment bucket: ${BUCKET_NAME}"
            if aws s3 mb s3://${BUCKET_NAME} --region us-west-2; then
              echo "‚úÖ Created deployment bucket: ${BUCKET_NAME}"
            else
              echo "‚ùå Failed to create deployment bucket"
              exit 1
            fi
          fi

      - name: Package CloudFormation template
        run: |
          echo "üì¶ Packaging CloudFormation template..."
          aws cloudformation package \
            --template-file cloudformation/template.yaml \
            --s3-bucket ${{ env.DEPLOYMENT_BUCKET }} \
            --output-template-file packaged-template.yaml \
            --region us-west-2

      - name: Package Lambda functions
        run: |
          echo "üì¶ Packaging Lambda functions..."
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"

          # Package Lambda functions
          cd lambda
          zip -r trigger_scan.zip trigger_scan.py
          zip -r api_audit_runs.zip api_audit_runs.py
          zip -r api_findings.zip api_findings.py

          # Verify files exist in lambda directory
          ls -la *.zip

          # Upload Lambda packages to S3 from lambda directory
          aws s3 cp trigger_scan.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/trigger_scan.zip --region us-west-2
          aws s3 cp api_audit_runs.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/api_audit_runs.zip --region us-west-2
          aws s3 cp api_findings.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/api_findings.zip --region us-west-2

          cd ..

          echo "‚úÖ Lambda functions packaged and uploaded"

      - name: Deploy CloudFormation stack
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"
          BEDROCK_MODEL_ID="${{ secrets.BEDROCK_MODEL_ID || 'anthropic.claude-3-5-sonnet-20241022-v2:0' }}"

          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "Updating existing stack..."
            
            # Try to update the stack, ignore "No updates" error
            UPDATE_OUTPUT=$(aws cloudformation update-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://packaged-template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=LambdaCodeBucketName,ParameterValue="${{ env.DEPLOYMENT_BUCKET }}" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }} 2>&1) || true

            if echo "$UPDATE_OUTPUT" | grep -q "No updates are to be performed"; then
              echo "‚úÖ No updates needed - stack is already up to date"
            elif echo "$UPDATE_OUTPUT" | grep -q "StackId"; then
              echo "‚úÖ Stack update initiated"
              aws cloudformation wait stack-update-complete \
                --stack-name "$STACK_NAME" \
                --region ${{ env.AWS_REGION }}
              echo "‚úÖ Stack update completed"
            else
              echo "‚ùå Stack update failed: $UPDATE_OUTPUT"
              exit 1
            fi
          else
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://packaged-template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=LambdaCodeBucketName,ParameterValue="${{ env.DEPLOYMENT_BUCKET }}" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-create-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
            echo "‚úÖ Stack creation completed"
          fi

      - name: Create Cognito domain
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          COGNITO_DOMAIN="${{ steps.generate-domain.outputs.COGNITO_DOMAIN }}"
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name "secureauditai-agent-${ENVIRONMENT}" --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text --region ${{ env.AWS_REGION }})

          if aws cognito-idp describe-user-pool-domain --domain "$COGNITO_DOMAIN" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "‚úÖ Domain $COGNITO_DOMAIN already exists"
          else
            echo "üìù Creating domain: $COGNITO_DOMAIN"
            aws cognito-idp create-user-pool-domain \
              --domain "$COGNITO_DOMAIN" \
              --user-pool-id "$USER_POOL_ID" \
              --region ${{ env.AWS_REGION }}
            echo "‚úÖ Domain $COGNITO_DOMAIN created"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
        env:
          CI: false

      - name: Deploy React frontend
        env:
          CI: false
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"

          # Get CloudFormation outputs
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text --region ${{ env.AWS_REGION }})
          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text --region ${{ env.AWS_REGION }})

          cd frontend

          # Configure frontend with CloudFormation outputs
          node ../scripts/configure-frontend.js "$USER_POOL_ID" "$USER_POOL_CLIENT_ID" "${{ env.AWS_REGION }}"

          # Build and deploy
          npm run build
          
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' --output text --region ${{ env.AWS_REGION }})
          aws s3 sync build/ s3://${FRONTEND_BUCKET} --delete --region ${{ env.AWS_REGION }}
          
          echo "‚úÖ Frontend deployed successfully to S3: ${FRONTEND_BUCKET}"
          
          # Check if CloudFront distribution exists
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "")
          
          if [ -n "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
            echo "üîÑ Invalidating CloudFront cache..."
            aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*" --region ${{ env.AWS_REGION }}
            echo "‚úÖ CloudFront cache invalidated"
          else
            echo "‚ÑπÔ∏è  No CloudFront distribution configured - files served directly from S3"
          fi

  # Deploy to Production (Manual with Approval)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: prod
    concurrency:
      group: deploy-prod
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate deterministic Cognito domain prefix
        id: generate-domain-prod
        run: |
          echo "üîÑ Generating deterministic Cognito domain prefix..."
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          DETERMINISTIC_SUFFIX="${ACCOUNT_ID: -8}"
          DETERMINISTIC_SUFFIX=$(echo "$DETERMINISTIC_SUFFIX" | tr -cd 'a-z0-9')
          COGNITO_PREFIX="secureauditai-${ENVIRONMENT}-${DETERMINISTIC_SUFFIX}"

          if [[ ! "$COGNITO_PREFIX" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || [[ ${#COGNITO_PREFIX} -lt 1 ]] || [[ ${#COGNITO_PREFIX} -gt 63 ]]; then
            echo "‚ùå Invalid domain format: $COGNITO_PREFIX"
            exit 1
          fi

          echo "‚úÖ Generated domain: ${COGNITO_PREFIX}"
          echo "COGNITO_DOMAIN=${COGNITO_PREFIX}" >> $GITHUB_OUTPUT

      - name: Setup S3 bucket for deployment artifacts
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          BUCKET_NAME="secureauditai-deployment-us-west-2-${ENVIRONMENT}"
          echo "DEPLOYMENT_BUCKET=${BUCKET_NAME}" >> $GITHUB_ENV

          # Check if bucket exists
          if aws s3 ls s3://${BUCKET_NAME} --region us-west-2 2>/dev/null; then
            echo "‚úÖ Using existing deployment bucket: ${BUCKET_NAME}"
          else
            echo "üì¶ Creating new deployment bucket: ${BUCKET_NAME}"
            if aws s3 mb s3://${BUCKET_NAME} --region us-west-2; then
              echo "‚úÖ Created deployment bucket: ${BUCKET_NAME}"
            else
              echo "‚ùå Failed to create deployment bucket"
              exit 1
            fi
          fi

      - name: Package CloudFormation template
        run: |
          echo "üì¶ Packaging CloudFormation template..."
          aws cloudformation package \
            --template-file cloudformation/template.yaml \
            --s3-bucket ${{ env.DEPLOYMENT_BUCKET }} \
            --output-template-file packaged-template.yaml \
            --region us-west-2

      - name: Package Lambda functions
        run: |
          echo "üì¶ Packaging Lambda functions..."
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"

          # Package Lambda functions
          cd lambda
          zip -r trigger_scan-${ENVIRONMENT}.zip trigger_scan.py
          zip -r api_audit_runs-${ENVIRONMENT}.zip api_audit_runs.py
          zip -r api_findings-${ENVIRONMENT}.zip api_findings.py
          cd ..

          # Verify files exist
          ls -la *-*.zip

          # Upload Lambda packages to S3
          aws s3 cp trigger_scan-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/trigger_scan-${ENVIRONMENT}.zip --region us-west-2
          aws s3 cp api_audit_runs-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/api_audit_runs-${ENVIRONMENT}.zip --region us-west-2
          aws s3 cp api_findings-${ENVIRONMENT}.zip s3://${{ env.DEPLOYMENT_BUCKET }}/lambda/api_findings-${ENVIRONMENT}.zip --region us-west-2

          echo "‚úÖ Lambda functions packaged and uploaded"

      - name: Deploy CloudFormation stack
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"
          BEDROCK_MODEL_ID="${{ secrets.BEDROCK_MODEL_ID || 'anthropic.claude-3-5-sonnet-20241022-v2:0' }}"

          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "Updating existing stack..."
            aws cloudformation update-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://packaged-template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=LambdaCodeBucketName,ParameterValue="${{ env.DEPLOYMENT_BUCKET }}" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-update-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          else
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://packaged-template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=LambdaCodeBucketName,ParameterValue="${{ env.DEPLOYMENT_BUCKET }}" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-create-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          fi

      - name: Create Cognito domain
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          COGNITO_DOMAIN="${{ steps.generate-domain-prod.outputs.COGNITO_DOMAIN }}"
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name "secureauditai-agent-${ENVIRONMENT}" --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text --region ${{ env.AWS_REGION }})

          if aws cognito-idp describe-user-pool-domain --domain "$COGNITO_DOMAIN" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "‚úÖ Domain $COGNITO_DOMAIN already exists"
          else
            echo "üìù Creating domain: $COGNITO_DOMAIN"
            aws cognito-idp create-user-pool-domain \
              --domain "$COGNITO_DOMAIN" \
              --user-pool-id "$USER_POOL_ID" \
              --region ${{ env.AWS_REGION }}
            echo "‚úÖ Domain $COGNITO_DOMAIN created"
          fi

      - name: Deploy React frontend
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"

          cd frontend

          # Configure frontend
          node scripts/configure-frontend.js

          # Build and deploy
          npm run build
          aws s3 sync build/ s3://$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' --output text --region ${{ env.AWS_REGION }}) --delete --region ${{ env.AWS_REGION }}

          # Invalidate CloudFront
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' --output text --region ${{ env.AWS_REGION }})
          aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*" --region ${{ env.AWS_REGION }}

      - name: Check AgentCore deployment status
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"

          if aws ecr describe-repositories --repository-names "secureauditai-agentcore-${ENVIRONMENT}" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "‚ÑπÔ∏è AgentCore repository exists - checking deployment status..."

            # Check if the ECR image exists
            if aws ecr describe-images --repository-name "secureauditai-agentcore-${ENVIRONMENT}" --region ${{ env.AWS_REGION }} --query 'imageDetails[0].imageDigest' >/dev/null 2>&1; then
              echo "‚úÖ AgentCore image found - deployment should be available"
            else
              echo "‚ö†Ô∏è AgentCore repository exists but no image found - deployment may be incomplete"
            fi
          else
            echo "‚ö†Ô∏è ECR repository not found - skipping AgentCore deployment"
          fi

  # Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success')
    steps:
      - name: Validate deployment
        run: |
          echo "üîç Validating deployment across all environments..."

          if [ "${{ needs.deploy-dev.result }}" = "success" ]; then
            echo "‚úÖ Development deployment validated"
          fi

          if [ "${{ needs.deploy-prod.result }}" = "success" ]; then
            echo "‚úÖ Production deployment validated"
          fi

  # Cleanup resources (manual trigger)
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'cleanup'
    steps:
      - name: Cleanup notification
        run: |
          echo "üßπ Cleanup job triggered - implement resource cleanup logic here"