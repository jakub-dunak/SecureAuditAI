name: Deploy SecureAuditAI Agent

on:
  # push:
  #   branches: [ main ]
  #   paths-ignore:
  #     - '**.md'
  #     - '.gitignore'
  #     - 'LICENSE'
  #     - 'assets/**'
  # pull_request:
  #   branches: [ main ]
  #   paths-ignore:
  #     - '**.md'
  #     - '.gitignore'
  #     - 'LICENSE'
  #     - 'assets/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Python linting
        run: |
          pip install black isort mypy
          black --check lambda/ agent/ || echo "Black formatting issues found"
          isort --check-only lambda/ agent/ || echo "Import sorting issues found"
          mypy lambda/ agent/ || echo "Type checking issues found"

      - name: Run Python tests
        run: |
          pip install pytest pytest-asyncio
          pytest lambda/ agent/ -v --tb=short || echo "Tests completed with issues"

      - name: Run frontend linting
        run: |
          cd frontend
          npm install eslint --save-dev
          npx eslint src --ext .js,.jsx,.ts,.tsx || echo "Linting issues found"

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage || echo "Tests completed with issues"

      - name: Security scan (Python)
        uses: securecodewarrior/github-action-pip-audit@v1
        with:
          pip-audit-version: '2.7.2'

      - name: Security scan (Node.js)
        run: |
          cd frontend
          npm audit --audit-level moderate || echo "Security vulnerabilities found"

  # CloudFormation Validation
  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://template.yaml

      - name: Check for IAM capabilities
        run: |
          # Ensure template requires IAM capabilities
          grep -q "CAPABILITY_NAMED_IAM" deploy.sh || (echo "Warning: IAM capabilities not found in deploy script" && exit 1)

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [quality-checks, validate-infrastructure]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Deploy CloudFormation stack
        run: |
          STACK_NAME="secureauditai-agent-dev"
          BEDROCK_MODEL_ID="${{ secrets.BEDROCK_MODEL_ID || 'anthropic.claude-3-5-sonnet-20241022-v2:0' }}"

          # Generate unique Cognito domain prefix
          COGNITO_PREFIX="secureauditai-$(openssl rand -hex 4)"

          # Deploy or update CloudFormation stack
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "Updating existing stack..."
            aws cloudformation update-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue=dev \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=CognitoDomainPrefix,ParameterValue="$COGNITO_PREFIX" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-update-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          else
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue=dev \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=CognitoDomainPrefix,ParameterValue="$COGNITO_PREFIX" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-create-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          fi

          echo "✅ CloudFormation stack deployed successfully"

      - name: Deploy React frontend
        run: |
          STACK_NAME="secureauditai-agent-dev"

          # Install frontend dependencies
          cd frontend
          npm ci

          # Configure Amplify with CloudFormation outputs
          cd ..
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)
          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)
          node scripts/configure-frontend.js "$USER_POOL_ID" "$USER_POOL_CLIENT_ID" "${{ env.AWS_REGION }}"

          # Build for production
          cd frontend
          npm run build

          # Get frontend bucket name from stack outputs
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
            --output text)

          if [ "$FRONTEND_BUCKET" != "None" ]; then
            echo "Deploying frontend to S3 bucket: $FRONTEND_BUCKET"

            # Sync build to S3 with cache control
            aws s3 sync build/ s3://"$FRONTEND_BUCKET" \
              --delete \
              --cache-control max-age=31536000 \
              --region ${{ env.AWS_REGION }}

            # Enable static website hosting
            aws s3 website s3://"$FRONTEND_BUCKET" \
              --index-document index.html \
              --error-document index.html \
              --region ${{ env.AWS_REGION }}

            FRONTEND_URL="http://${FRONTEND_BUCKET}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
            echo "✅ Frontend deployed to: $FRONTEND_URL"
            echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          else
            echo "❌ Frontend bucket not found in stack outputs"
            exit 1
          fi

      - name: Build and deploy AgentCore runtime
        if: success()
        run: |
          STACK_NAME="secureauditai-agent-dev"

          # Install Python dependencies for AgentCore
          python -m pip install --upgrade pip
          pip install -r agent/requirements.txt

          # Get ECR repository URI from stack outputs
          ECR_REPO=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`EcrRepositoryUri`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [ -n "$ECR_REPO" ] && [ "$ECR_REPO" != "None" ]; then
            echo "Building and pushing AgentCore runtime to ECR: $ECR_REPO"

            # Build Docker image
            docker build -t secureauditai-agent agent/

            # Tag and push to ECR
            REPO_NAME=$(echo "$ECR_REPO" | cut -d'/' -f2)
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin "$ECR_REPO"
            docker tag secureauditai-agent:latest "$ECR_REPO":latest
            docker push "$ECR_REPO":latest

            echo "✅ AgentCore runtime deployed to ECR"
          else
            echo "⚠️ ECR repository not found in stack outputs. Skipping AgentCore deployment."
          fi

      - name: Extract deployment outputs
        id: deployment
        run: |
          API_GATEWAY_URL=$(aws cloudformation describe-stacks \
            --stack-name secureauditai-agent-dev \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)
          USER_POOL_ID=$(aws cloudformation describe-stacks \
            --stack-name secureauditai-agent-dev \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
            --output text)
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name secureauditai-agent-dev \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
            --output text)

          echo "api_gateway_url=$API_GATEWAY_URL" >> $GITHUB_OUTPUT
          echo "user_pool_id=$USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "frontend_bucket=$FRONTEND_BUCKET" >> $GITHUB_OUTPUT

      - name: Create demo user
        run: |
          aws cognito-idp admin-create-user \
            --user-pool-id ${{ steps.deployment.outputs.user_pool_id }} \
            --username demo@secureauditai.com \
            --temporary-password TempPass123! \
            --message-action SUPPRESS \
            --region ${{ env.AWS_REGION }}

      - name: Comment PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Development deployment completed!**

              **API Gateway:** ${{ steps.deployment.outputs.api_gateway_url }}
              **Frontend:** http://${{ steps.deployment.outputs.frontend_bucket }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com

              **Demo Credentials:**
              - Email: demo@secureauditai.com
              - Password: TempPass123!

              Ready for testing! 🎉`
            })

  # Deploy to Staging (Manual)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Deploy CloudFormation stack
        run: |
          STACK_NAME="secureauditai-agent-staging"
          BEDROCK_MODEL_ID="${{ secrets.BEDROCK_MODEL_ID || 'anthropic.claude-3-5-sonnet-20241022-v2:0' }}"

          # Generate unique Cognito domain prefix
          COGNITO_PREFIX="secureauditai-staging-$(openssl rand -hex 4)"

          # Deploy or update CloudFormation stack
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "Updating existing stack..."
            aws cloudformation update-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue=staging \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=CognitoDomainPrefix,ParameterValue="$COGNITO_PREFIX" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-update-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          else
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue=staging \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=CognitoDomainPrefix,ParameterValue="$COGNITO_PREFIX" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-create-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          fi

          echo "✅ CloudFormation stack deployed successfully"

      - name: Deploy React frontend
        run: |
          STACK_NAME="secureauditai-agent-staging"

          # Install frontend dependencies
          cd frontend
          npm ci

          # Configure Amplify with CloudFormation outputs
          cd ..
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)
          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)
          node scripts/configure-frontend.js "$USER_POOL_ID" "$USER_POOL_CLIENT_ID" "${{ env.AWS_REGION }}"

          # Build for production
          cd frontend
          npm run build

          # Get frontend bucket name from stack outputs
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
            --output text)

          if [ "$FRONTEND_BUCKET" != "None" ]; then
            echo "Deploying frontend to S3 bucket: $FRONTEND_BUCKET"

            # Sync build to S3 with cache control
            aws s3 sync build/ s3://"$FRONTEND_BUCKET" \
              --delete \
              --cache-control max-age=31536000 \
              --region ${{ env.AWS_REGION }}

            # Enable static website hosting
            aws s3 website s3://"$FRONTEND_BUCKET" \
              --index-document index.html \
              --error-document index.html \
              --region ${{ env.AWS_REGION }}

            FRONTEND_URL="http://${FRONTEND_BUCKET}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
            echo "✅ Frontend deployed to: $FRONTEND_URL"
          else
            echo "❌ Frontend bucket not found in stack outputs"
            exit 1
          fi

  # Deploy to Production (Manual with Approval)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Deploy CloudFormation stack
        run: |
          STACK_NAME="secureauditai-agent-prod"
          BEDROCK_MODEL_ID="${{ secrets.BEDROCK_MODEL_ID || 'anthropic.claude-3-5-sonnet-20241022-v2:0' }}"

          # Generate unique Cognito domain prefix
          COGNITO_PREFIX="secureauditai-prod-$(openssl rand -hex 4)"

          # Deploy or update CloudFormation stack
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "Updating existing stack..."
            aws cloudformation update-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue=prod \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=CognitoDomainPrefix,ParameterValue="$COGNITO_PREFIX" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-update-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          else
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue=prod \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=CognitoDomainPrefix,ParameterValue="$COGNITO_PREFIX" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-create-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          fi

          echo "✅ CloudFormation stack deployed successfully"

      - name: Deploy React frontend
        run: |
          STACK_NAME="secureauditai-agent-prod"

          # Install frontend dependencies
          cd frontend
          npm ci

          # Configure Amplify with CloudFormation outputs
          cd ..
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)
          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)
          node scripts/configure-frontend.js "$USER_POOL_ID" "$USER_POOL_CLIENT_ID" "${{ env.AWS_REGION }}"

          # Build for production
          cd frontend
          npm run build

          # Get frontend bucket name from stack outputs
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
            --output text)

          if [ "$FRONTEND_BUCKET" != "None" ]; then
            echo "Deploying frontend to S3 bucket: $FRONTEND_BUCKET"

            # Sync build to S3 with cache control
            aws s3 sync build/ s3://"$FRONTEND_BUCKET" \
              --delete \
              --cache-control max-age=31536000 \
              --region ${{ env.AWS_REGION }}

            # Enable static website hosting
            aws s3 website s3://"$FRONTEND_BUCKET" \
              --index-document index.html \
              --error-document index.html \
              --region ${{ env.AWS_REGION }}

            FRONTEND_URL="http://${FRONTEND_BUCKET}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
            echo "✅ Frontend deployed to: $FRONTEND_URL"
          else
            echo "❌ Frontend bucket not found in stack outputs"
            exit 1
          fi

  # Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-prod.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate deployment
        run: |
          echo "🔍 Validating deployment across all environments..."

          # Check if any deployment succeeded
          if [ "${{ needs.deploy-dev.result }}" = "success" ]; then
            echo "✅ Development deployment validated"
          fi

          if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "✅ Staging deployment validated"
          fi

          if [ "${{ needs.deploy-prod.result }}" = "success" ]; then
            echo "✅ Production deployment validated"
          fi

          echo "🎉 All successful deployments validated!"

  # Cleanup failed deployments
  cleanup:
    name: Cleanup Failed Deployments
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: failure() && (needs.deploy-dev.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-prod.result == 'failure')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup failed deployment
        if: failure()
        run: |
          STACK_NAME="secureauditai-agent-dev"
          echo "🧹 Cleaning up failed deployment for stack: $STACK_NAME"

          # Check if stack exists and delete it
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "Deleting failed stack..."
            aws cloudformation delete-stack \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-delete-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }} || echo "Stack deletion completed with warnings"
          fi

          echo "✅ Cleanup completed"
