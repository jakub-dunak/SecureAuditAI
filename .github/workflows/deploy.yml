name: Deploy SecureAuditAI Agent

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'assets/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'assets/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-west-2
  AWS_DEFAULT_REGION: us-west-2
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Validate Infrastructure
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate CloudFormation template
        run: |
          echo "🔍 Validating CloudFormation template..."
          aws cloudformation validate-template --template-body file://cloudformation/template.yaml
          echo "✅ Template validation passed"

      - name: Validate Lambda packages exist
        run: |
          echo "🔍 Checking Lambda source files..."
          [ -f "lambda/trigger_scan.py" ] && echo "✅ trigger_scan.py found" || (echo "❌ trigger_scan.py missing" && exit 1)
          [ -f "lambda/api_audit_runs.py" ] && echo "✅ api_audit_runs.py found" || (echo "❌ api_audit_runs.py missing" && exit 1)
          [ -f "lambda/api_findings.py" ] && echo "✅ api_findings.py found" || (echo "❌ api_findings.py missing" && exit 1)
          echo "✅ All Lambda source files present"

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: dev
    concurrency:
      group: deploy-dev-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate deterministic Cognito domain prefix
        id: generate-domain
        run: |
          echo "🔄 Generating deterministic Cognito domain prefix..."
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          DETERMINISTIC_SUFFIX="${ACCOUNT_ID: -8}"
          DETERMINISTIC_SUFFIX=$(echo "$DETERMINISTIC_SUFFIX" | tr -cd 'a-z0-9')
          COGNITO_PREFIX="secureauditai-${ENVIRONMENT}-${DETERMINISTIC_SUFFIX}"

          if [[ ! "$COGNITO_PREFIX" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || [[ ${#COGNITO_PREFIX} -lt 1 ]] || [[ ${#COGNITO_PREFIX} -gt 63 ]]; then
            echo "❌ Invalid domain format: $COGNITO_PREFIX"
            exit 1
          fi

          echo "✅ Generated domain: ${COGNITO_PREFIX}"
          echo "COGNITO_DOMAIN=${COGNITO_PREFIX}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Prepare Lambda packages
        run: |
          export AWS_REGION="${{ env.AWS_REGION }}"
          export AWS_DEFAULT_REGION="${{ env.AWS_REGION }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"
          LAMBDA_BUCKET="${STACK_NAME}-lambda-code-${ENVIRONMENT}"

          echo "🔍 Checking bucket ${LAMBDA_BUCKET} in region ${AWS_REGION}..."

          if aws s3api head-bucket --bucket "${LAMBDA_BUCKET}" --region "${AWS_REGION}" 2>/dev/null; then
            echo "✅ Bucket ${LAMBDA_BUCKET} exists in region ${AWS_REGION}"
          else
            echo "🔍 Checking if bucket exists elsewhere..."
            if BUCKET_LOCATION=$(aws s3api get-bucket-location --bucket "${LAMBDA_BUCKET}" 2>/dev/null); then
              BUCKET_REGION=$(echo "$BUCKET_LOCATION" | jq -r '.LocationConstraint // "us-east-1"')
              echo "❌ Bucket ${LAMBDA_BUCKET} exists in region ${BUCKET_REGION}, expected ${AWS_REGION}"
              echo "Please delete the bucket from ${BUCKET_REGION} or use a different environment name."
              exit 1
            else
              echo "📦 Creating bucket ${LAMBDA_BUCKET} in region ${AWS_REGION}"

              # Retry bucket creation with exponential backoff to handle AWS eventual consistency
              MAX_RETRIES=5
              RETRY_COUNT=0
              BUCKET_CREATED=false

              while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                echo "🔄 Attempting to create bucket (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)..."

                if aws s3 mb "s3://${LAMBDA_BUCKET}" --region "${AWS_REGION}"; then
                  BUCKET_CREATED=true
                  echo "✅ Bucket ${LAMBDA_BUCKET} created successfully"
                  break
                else
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                    # Exponential backoff: 2^retry_count seconds (2, 4, 8, 16 seconds)
                    SLEEP_TIME=$((2 ** RETRY_COUNT))
                    echo "⚠️  Bucket creation failed (likely due to AWS eventual consistency). Retrying in ${SLEEP_TIME} seconds..."
                    sleep $SLEEP_TIME
                  fi
                fi
              done

              if [ "$BUCKET_CREATED" = false ]; then
                echo "❌ Failed to create bucket ${LAMBDA_BUCKET} after $MAX_RETRIES attempts"
                echo "This may be due to:"
                echo "1. AWS eventual consistency - bucket name still being cleaned up from recent deletion"
                echo "2. Insufficient permissions"
                echo ""
                echo "Try again in a few minutes, or use a different environment name."
                exit 1
              fi
            fi
          fi

          mkdir -p lambda-packages
          cd lambda
          zip -r ../lambda-packages/trigger_scan.zip trigger_scan.py
          zip -r ../lambda-packages/api_audit_runs.zip api_audit_runs.py
          zip -r ../lambda-packages/api_findings.zip api_findings.py
          cd ..

          aws s3 cp lambda-packages/trigger_scan.zip "s3://${LAMBDA_BUCKET}/lambda/trigger_scan.zip" --region "${AWS_REGION}" --quiet
          aws s3 cp lambda-packages/api_audit_runs.zip "s3://${LAMBDA_BUCKET}/lambda/api_audit_runs.zip" --region "${AWS_REGION}" --quiet
          aws s3 cp lambda-packages/api_findings.zip "s3://${LAMBDA_BUCKET}/lambda/api_findings.zip" --region "${AWS_REGION}" --quiet
          echo "✅ Lambda packages uploaded"

      - name: Deploy CloudFormation stack
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"
          LAMBDA_BUCKET="${STACK_NAME}-lambda-code-${ENVIRONMENT}"
          BEDROCK_MODEL_ID="${{ secrets.BEDROCK_MODEL_ID || 'anthropic.claude-3-5-sonnet-20241022-v2:0' }}"

          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "Updating existing stack..."
            aws cloudformation update-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=LambdaCodeBucketName,ParameterValue="$LAMBDA_BUCKET" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-update-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          else
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=LambdaCodeBucketName,ParameterValue="$LAMBDA_BUCKET" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-create-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          fi

          echo "✅ CloudFormation stack deployed successfully"

      - name: Create or verify Cognito domain
        run: |
          export AWS_REGION="${{ env.AWS_REGION }}"
          export AWS_DEFAULT_REGION="${{ env.AWS_REGION }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"
          COGNITO_DOMAIN="${{ steps.generate-domain.outputs.COGNITO_DOMAIN }}"

          USER_POOL_ID=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
            --output text)

          if aws cognito-idp describe-user-pool-domain --domain "$COGNITO_DOMAIN" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "✅ Domain $COGNITO_DOMAIN already exists"
          else
            echo "📝 Creating domain: $COGNITO_DOMAIN"
            aws cognito-idp create-user-pool-domain \
              --domain "$COGNITO_DOMAIN" \
              --user-pool-id "$USER_POOL_ID" \
              --region ${{ env.AWS_REGION }}
            echo "✅ Domain $COGNITO_DOMAIN created"
          fi

      - name: Deploy React frontend
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"

          cd frontend
          npm ci
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)
          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)
          node ../scripts/configure-frontend.js "$USER_POOL_ID" "$USER_POOL_CLIENT_ID" "${{ env.AWS_REGION }}"
          npm run build

          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
            --output text)

          aws s3 sync build/ "s3://$FRONTEND_BUCKET" --delete --region ${{ env.AWS_REGION }}
          aws s3 website "s3://$FRONTEND_BUCKET" --index-document index.html --error-document index.html --region ${{ env.AWS_REGION }}
          echo "✅ Frontend deployed"

      - name: Build and deploy AgentCore runtime
        if: success()
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"

          python -m pip install --upgrade pip
          pip install -r agent/requirements.txt

          ECR_REPO=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`EcrRepositoryUri`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [ -n "$ECR_REPO" ] && [ "$ECR_REPO" != "None" ]; then
            echo "Building and pushing AgentCore runtime to ECR: $ECR_REPO"
            docker build -t secureauditai-agent agent/
            REPO_NAME=$(echo "$ECR_REPO" | cut -d'/' -f2)
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin "$ECR_REPO"
            docker tag secureauditai-agent:latest "$ECR_REPO":latest
            docker push "$ECR_REPO":latest
            echo "✅ AgentCore runtime deployed to ECR"
          else
            echo "⚠️ ECR repository not found - skipping AgentCore deployment"
          fi

      - name: Comment PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const apiUrl = `https://${process.env.DEPLOYMENT_ID || 'unknown'}.execute-api.${process.env.AWS_REGION}.amazonaws.com/dev`;
            const frontendUrl = `http://secureauditai-agent-dev-frontend-dev.s3-website-${process.env.AWS_REGION}.amazonaws.com`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Development deployment completed!**

              **API Gateway:** ${apiUrl}
              **Frontend:** ${frontendUrl}

              **Demo Credentials:**
              - Email: demo@secureauditai.com
              - Password: TempPass123!

              Ready for testing! 🎉`
            })

  # Deploy to Production (Manual with Approval)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: prod
    concurrency:
      group: deploy-prod
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate deterministic Cognito domain prefix
        id: generate-domain-prod
        run: |
          echo "🔄 Generating deterministic Cognito domain prefix..."
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          DETERMINISTIC_SUFFIX="${ACCOUNT_ID: -8}"
          DETERMINISTIC_SUFFIX=$(echo "$DETERMINISTIC_SUFFIX" | tr -cd 'a-z0-9')
          COGNITO_PREFIX="secureauditai-${ENVIRONMENT}-${DETERMINISTIC_SUFFIX}"

          if [[ ! "$COGNITO_PREFIX" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || [[ ${#COGNITO_PREFIX} -lt 1 ]] || [[ ${#COGNITO_PREFIX} -gt 63 ]]; then
            echo "❌ Invalid domain format: $COGNITO_PREFIX"
            exit 1
          fi

          echo "✅ Generated domain: ${COGNITO_PREFIX}"
          echo "COGNITO_DOMAIN=${COGNITO_PREFIX}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Prepare Lambda packages
        run: |
          export AWS_REGION="${{ env.AWS_REGION }}"
          export AWS_DEFAULT_REGION="${{ env.AWS_REGION }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"
          LAMBDA_BUCKET="${STACK_NAME}-lambda-code-${ENVIRONMENT}"

          echo "🔍 Checking bucket ${LAMBDA_BUCKET} in region ${AWS_REGION}..."

          if aws s3api head-bucket --bucket "${LAMBDA_BUCKET}" --region "${AWS_REGION}" 2>/dev/null; then
            echo "✅ Bucket ${LAMBDA_BUCKET} exists in region ${AWS_REGION}"
          else
            echo "🔍 Checking if bucket exists elsewhere..."
            if BUCKET_LOCATION=$(aws s3api get-bucket-location --bucket "${LAMBDA_BUCKET}" 2>/dev/null); then
              BUCKET_REGION=$(echo "$BUCKET_LOCATION" | jq -r '.LocationConstraint // "us-east-1"')
              echo "❌ Bucket ${LAMBDA_BUCKET} exists in region ${BUCKET_REGION}, expected ${AWS_REGION}"
              echo "Please delete the bucket from ${BUCKET_REGION} or use a different environment name."
              exit 1
            else
              echo "📦 Creating bucket ${LAMBDA_BUCKET} in region ${AWS_REGION}"

              # Retry bucket creation with exponential backoff to handle AWS eventual consistency
              MAX_RETRIES=5
              RETRY_COUNT=0
              BUCKET_CREATED=false

              while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                echo "🔄 Attempting to create bucket (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)..."

                if aws s3 mb "s3://${LAMBDA_BUCKET}" --region "${AWS_REGION}"; then
                  BUCKET_CREATED=true
                  echo "✅ Bucket ${LAMBDA_BUCKET} created successfully"
                  break
                else
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                    # Exponential backoff: 2^retry_count seconds (2, 4, 8, 16 seconds)
                    SLEEP_TIME=$((2 ** RETRY_COUNT))
                    echo "⚠️  Bucket creation failed (likely due to AWS eventual consistency). Retrying in ${SLEEP_TIME} seconds..."
                    sleep $SLEEP_TIME
                  fi
                fi
              done

              if [ "$BUCKET_CREATED" = false ]; then
                echo "❌ Failed to create bucket ${LAMBDA_BUCKET} after $MAX_RETRIES attempts"
                echo "This may be due to:"
                echo "1. AWS eventual consistency - bucket name still being cleaned up from recent deletion"
                echo "2. Insufficient permissions"
                echo ""
                echo "Try again in a few minutes, or use a different environment name."
                exit 1
              fi
            fi
          fi

          mkdir -p lambda-packages
          cd lambda
          zip -r ../lambda-packages/trigger_scan.zip trigger_scan.py
          zip -r ../lambda-packages/api_audit_runs.zip api_audit_runs.py
          zip -r ../lambda-packages/api_findings.zip api_findings.py
          cd ..

          aws s3 cp lambda-packages/trigger_scan.zip "s3://${LAMBDA_BUCKET}/lambda/trigger_scan.zip" --region "${AWS_REGION}" --quiet
          aws s3 cp lambda-packages/api_audit_runs.zip "s3://${LAMBDA_BUCKET}/lambda/api_audit_runs.zip" --region "${AWS_REGION}" --quiet
          aws s3 cp lambda-packages/api_findings.zip "s3://${LAMBDA_BUCKET}/lambda/api_findings.zip" --region "${AWS_REGION}" --quiet
          echo "✅ Lambda packages uploaded"

      - name: Deploy CloudFormation stack
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"
          LAMBDA_BUCKET="${STACK_NAME}-lambda-code-${ENVIRONMENT}"
          BEDROCK_MODEL_ID="${{ secrets.BEDROCK_MODEL_ID || 'anthropic.claude-3-5-sonnet-20241022-v2:0' }}"

          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "Updating existing stack..."
            aws cloudformation update-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=LambdaCodeBucketName,ParameterValue="$LAMBDA_BUCKET" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-update-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          else
            echo "Creating new stack..."
            aws cloudformation create-stack \
              --stack-name "$STACK_NAME" \
              --template-body file://cloudformation/template.yaml \
              --parameters \
                ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
                ParameterKey=BedrockModelId,ParameterValue="$BEDROCK_MODEL_ID" \
                ParameterKey=LambdaCodeBucketName,ParameterValue="$LAMBDA_BUCKET" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-create-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}
          fi

          echo "✅ CloudFormation stack deployed successfully"

      - name: Create or verify Cognito domain
        run: |
          export AWS_REGION="${{ env.AWS_REGION }}"
          export AWS_DEFAULT_REGION="${{ env.AWS_REGION }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"
          COGNITO_DOMAIN="${{ steps.generate-domain-prod.outputs.COGNITO_DOMAIN }}"

          USER_POOL_ID=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
            --output text)

          if aws cognito-idp describe-user-pool-domain --domain "$COGNITO_DOMAIN" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "✅ Domain $COGNITO_DOMAIN already exists"
          else
            echo "📝 Creating domain: $COGNITO_DOMAIN"
            aws cognito-idp create-user-pool-domain \
              --domain "$COGNITO_DOMAIN" \
              --user-pool-id "$USER_POOL_ID" \
              --region ${{ env.AWS_REGION }}
            echo "✅ Domain $COGNITO_DOMAIN created"
          fi

      - name: Deploy React frontend
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"

          cd frontend
          npm ci
          USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' --output text)
          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' --output text)
          node ../scripts/configure-frontend.js "$USER_POOL_ID" "$USER_POOL_CLIENT_ID" "${{ env.AWS_REGION }}"
          npm run build

          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
            --output text)

          aws s3 sync build/ "s3://$FRONTEND_BUCKET" --delete --region ${{ env.AWS_REGION }}
          aws s3 website "s3://$FRONTEND_BUCKET" --index-document index.html --error-document index.html --region ${{ env.AWS_REGION }}
          echo "✅ Frontend deployed"

      - name: Build and deploy AgentCore runtime
        if: success()
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'prod' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"

          python -m pip install --upgrade pip
          pip install -r agent/requirements.txt

          ECR_REPO=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`EcrRepositoryUri`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [ -n "$ECR_REPO" ] && [ "$ECR_REPO" != "None" ]; then
            echo "Building and pushing AgentCore runtime to ECR: $ECR_REPO"
            docker build -t secureauditai-agent agent/
            REPO_NAME=$(echo "$ECR_REPO" | cut -d'/' -f2)
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin "$ECR_REPO"
            docker tag secureauditai-agent:latest "$ECR_REPO":latest
            docker push "$ECR_REPO":latest
            echo "✅ AgentCore runtime deployed to ECR"
          else
            echo "⚠️ ECR repository not found - skipping AgentCore deployment"
          fi

  # Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success')
    steps:
      - name: Validate deployment
        run: |
          echo "🔍 Validating deployment across all environments..."

          if [ "${{ needs.deploy-dev.result }}" = "success" ]; then
            echo "✅ Development deployment validated"
          fi

          if [ "${{ needs.deploy-prod.result }}" = "success" ]; then
            echo "✅ Production deployment validated"
          fi

          echo "🎉 All successful deployments validated!"

  # Cleanup failed deployments
  cleanup:
    name: Cleanup Failed Deployments
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: failure() && (needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure')
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/personal-github-oidc-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup failed deployment
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
          STACK_NAME="secureauditai-agent-${ENVIRONMENT}"
          echo "🧹 Cleaning up failed deployment for stack: $STACK_NAME"

          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "Deleting failed stack..."
            aws cloudformation delete-stack \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }}

            aws cloudformation wait stack-delete-complete \
              --stack-name "$STACK_NAME" \
              --region ${{ env.AWS_REGION }} || echo "Stack deletion completed with warnings"
          fi

          echo "✅ Cleanup completed"
